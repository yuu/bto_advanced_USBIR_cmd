// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bto/ir_service.proto
#ifndef GRPC_bto_2fir_5fservice_2eproto__INCLUDED
#define GRPC_bto_2fir_5fservice_2eproto__INCLUDED

#include "bto/ir_service.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace bto {

class IRService final {
 public:
  static constexpr char const* service_full_name() {
    return "bto.IRService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Write(::grpc::ClientContext* context, const ::bto::WriteRequest& request, ::bto::Result* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bto::Result>> AsyncWrite(::grpc::ClientContext* context, const ::bto::WriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bto::Result>>(AsyncWriteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bto::Result>> PrepareAsyncWrite(::grpc::ClientContext* context, const ::bto::WriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bto::Result>>(PrepareAsyncWriteRaw(context, request, cq));
    }
    virtual ::grpc::Status RecStart(::grpc::ClientContext* context, const ::bto::RecStartRequest& request, ::bto::Result* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bto::Result>> AsyncRecStart(::grpc::ClientContext* context, const ::bto::RecStartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bto::Result>>(AsyncRecStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bto::Result>> PrepareAsyncRecStart(::grpc::ClientContext* context, const ::bto::RecStartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bto::Result>>(PrepareAsyncRecStartRaw(context, request, cq));
    }
    virtual ::grpc::Status RecStop(::grpc::ClientContext* context, const ::bto::Empty& request, ::bto::Result* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bto::Result>> AsyncRecStop(::grpc::ClientContext* context, const ::bto::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bto::Result>>(AsyncRecStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bto::Result>> PrepareAsyncRecStop(::grpc::ClientContext* context, const ::bto::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bto::Result>>(PrepareAsyncRecStopRaw(context, request, cq));
    }
    virtual ::grpc::Status DumpRecord(::grpc::ClientContext* context, const ::bto::Empty& request, ::bto::DumpRecordResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bto::DumpRecordResponse>> AsyncDumpRecord(::grpc::ClientContext* context, const ::bto::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bto::DumpRecordResponse>>(AsyncDumpRecordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bto::DumpRecordResponse>> PrepareAsyncDumpRecord(::grpc::ClientContext* context, const ::bto::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bto::DumpRecordResponse>>(PrepareAsyncDumpRecordRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Write(::grpc::ClientContext* context, const ::bto::WriteRequest* request, ::bto::Result* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Write(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bto::Result* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Write(::grpc::ClientContext* context, const ::bto::WriteRequest* request, ::bto::Result* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Write(::grpc::ClientContext* context, const ::bto::WriteRequest* request, ::bto::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Write(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bto::Result* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Write(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bto::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void RecStart(::grpc::ClientContext* context, const ::bto::RecStartRequest* request, ::bto::Result* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RecStart(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bto::Result* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RecStart(::grpc::ClientContext* context, const ::bto::RecStartRequest* request, ::bto::Result* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RecStart(::grpc::ClientContext* context, const ::bto::RecStartRequest* request, ::bto::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RecStart(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bto::Result* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RecStart(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bto::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void RecStop(::grpc::ClientContext* context, const ::bto::Empty* request, ::bto::Result* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RecStop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bto::Result* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RecStop(::grpc::ClientContext* context, const ::bto::Empty* request, ::bto::Result* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RecStop(::grpc::ClientContext* context, const ::bto::Empty* request, ::bto::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RecStop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bto::Result* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RecStop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bto::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DumpRecord(::grpc::ClientContext* context, const ::bto::Empty* request, ::bto::DumpRecordResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DumpRecord(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bto::DumpRecordResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DumpRecord(::grpc::ClientContext* context, const ::bto::Empty* request, ::bto::DumpRecordResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DumpRecord(::grpc::ClientContext* context, const ::bto::Empty* request, ::bto::DumpRecordResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DumpRecord(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bto::DumpRecordResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DumpRecord(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bto::DumpRecordResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bto::Result>* AsyncWriteRaw(::grpc::ClientContext* context, const ::bto::WriteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bto::Result>* PrepareAsyncWriteRaw(::grpc::ClientContext* context, const ::bto::WriteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bto::Result>* AsyncRecStartRaw(::grpc::ClientContext* context, const ::bto::RecStartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bto::Result>* PrepareAsyncRecStartRaw(::grpc::ClientContext* context, const ::bto::RecStartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bto::Result>* AsyncRecStopRaw(::grpc::ClientContext* context, const ::bto::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bto::Result>* PrepareAsyncRecStopRaw(::grpc::ClientContext* context, const ::bto::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bto::DumpRecordResponse>* AsyncDumpRecordRaw(::grpc::ClientContext* context, const ::bto::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bto::DumpRecordResponse>* PrepareAsyncDumpRecordRaw(::grpc::ClientContext* context, const ::bto::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Write(::grpc::ClientContext* context, const ::bto::WriteRequest& request, ::bto::Result* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bto::Result>> AsyncWrite(::grpc::ClientContext* context, const ::bto::WriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bto::Result>>(AsyncWriteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bto::Result>> PrepareAsyncWrite(::grpc::ClientContext* context, const ::bto::WriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bto::Result>>(PrepareAsyncWriteRaw(context, request, cq));
    }
    ::grpc::Status RecStart(::grpc::ClientContext* context, const ::bto::RecStartRequest& request, ::bto::Result* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bto::Result>> AsyncRecStart(::grpc::ClientContext* context, const ::bto::RecStartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bto::Result>>(AsyncRecStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bto::Result>> PrepareAsyncRecStart(::grpc::ClientContext* context, const ::bto::RecStartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bto::Result>>(PrepareAsyncRecStartRaw(context, request, cq));
    }
    ::grpc::Status RecStop(::grpc::ClientContext* context, const ::bto::Empty& request, ::bto::Result* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bto::Result>> AsyncRecStop(::grpc::ClientContext* context, const ::bto::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bto::Result>>(AsyncRecStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bto::Result>> PrepareAsyncRecStop(::grpc::ClientContext* context, const ::bto::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bto::Result>>(PrepareAsyncRecStopRaw(context, request, cq));
    }
    ::grpc::Status DumpRecord(::grpc::ClientContext* context, const ::bto::Empty& request, ::bto::DumpRecordResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bto::DumpRecordResponse>> AsyncDumpRecord(::grpc::ClientContext* context, const ::bto::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bto::DumpRecordResponse>>(AsyncDumpRecordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bto::DumpRecordResponse>> PrepareAsyncDumpRecord(::grpc::ClientContext* context, const ::bto::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bto::DumpRecordResponse>>(PrepareAsyncDumpRecordRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Write(::grpc::ClientContext* context, const ::bto::WriteRequest* request, ::bto::Result* response, std::function<void(::grpc::Status)>) override;
      void Write(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bto::Result* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Write(::grpc::ClientContext* context, const ::bto::WriteRequest* request, ::bto::Result* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Write(::grpc::ClientContext* context, const ::bto::WriteRequest* request, ::bto::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Write(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bto::Result* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Write(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bto::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RecStart(::grpc::ClientContext* context, const ::bto::RecStartRequest* request, ::bto::Result* response, std::function<void(::grpc::Status)>) override;
      void RecStart(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bto::Result* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RecStart(::grpc::ClientContext* context, const ::bto::RecStartRequest* request, ::bto::Result* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RecStart(::grpc::ClientContext* context, const ::bto::RecStartRequest* request, ::bto::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RecStart(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bto::Result* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RecStart(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bto::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RecStop(::grpc::ClientContext* context, const ::bto::Empty* request, ::bto::Result* response, std::function<void(::grpc::Status)>) override;
      void RecStop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bto::Result* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RecStop(::grpc::ClientContext* context, const ::bto::Empty* request, ::bto::Result* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RecStop(::grpc::ClientContext* context, const ::bto::Empty* request, ::bto::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RecStop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bto::Result* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RecStop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bto::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DumpRecord(::grpc::ClientContext* context, const ::bto::Empty* request, ::bto::DumpRecordResponse* response, std::function<void(::grpc::Status)>) override;
      void DumpRecord(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bto::DumpRecordResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DumpRecord(::grpc::ClientContext* context, const ::bto::Empty* request, ::bto::DumpRecordResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DumpRecord(::grpc::ClientContext* context, const ::bto::Empty* request, ::bto::DumpRecordResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DumpRecord(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bto::DumpRecordResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DumpRecord(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bto::DumpRecordResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::bto::Result>* AsyncWriteRaw(::grpc::ClientContext* context, const ::bto::WriteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bto::Result>* PrepareAsyncWriteRaw(::grpc::ClientContext* context, const ::bto::WriteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bto::Result>* AsyncRecStartRaw(::grpc::ClientContext* context, const ::bto::RecStartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bto::Result>* PrepareAsyncRecStartRaw(::grpc::ClientContext* context, const ::bto::RecStartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bto::Result>* AsyncRecStopRaw(::grpc::ClientContext* context, const ::bto::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bto::Result>* PrepareAsyncRecStopRaw(::grpc::ClientContext* context, const ::bto::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bto::DumpRecordResponse>* AsyncDumpRecordRaw(::grpc::ClientContext* context, const ::bto::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bto::DumpRecordResponse>* PrepareAsyncDumpRecordRaw(::grpc::ClientContext* context, const ::bto::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Write_;
    const ::grpc::internal::RpcMethod rpcmethod_RecStart_;
    const ::grpc::internal::RpcMethod rpcmethod_RecStop_;
    const ::grpc::internal::RpcMethod rpcmethod_DumpRecord_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Write(::grpc::ServerContext* context, const ::bto::WriteRequest* request, ::bto::Result* response);
    virtual ::grpc::Status RecStart(::grpc::ServerContext* context, const ::bto::RecStartRequest* request, ::bto::Result* response);
    virtual ::grpc::Status RecStop(::grpc::ServerContext* context, const ::bto::Empty* request, ::bto::Result* response);
    virtual ::grpc::Status DumpRecord(::grpc::ServerContext* context, const ::bto::Empty* request, ::bto::DumpRecordResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Write() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* /*context*/, const ::bto::WriteRequest* /*request*/, ::bto::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWrite(::grpc::ServerContext* context, ::bto::WriteRequest* request, ::grpc::ServerAsyncResponseWriter< ::bto::Result>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RecStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RecStart() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_RecStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecStart(::grpc::ServerContext* /*context*/, const ::bto::RecStartRequest* /*request*/, ::bto::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecStart(::grpc::ServerContext* context, ::bto::RecStartRequest* request, ::grpc::ServerAsyncResponseWriter< ::bto::Result>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RecStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RecStop() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_RecStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecStop(::grpc::ServerContext* /*context*/, const ::bto::Empty* /*request*/, ::bto::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecStop(::grpc::ServerContext* context, ::bto::Empty* request, ::grpc::ServerAsyncResponseWriter< ::bto::Result>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DumpRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DumpRecord() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DumpRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpRecord(::grpc::ServerContext* /*context*/, const ::bto::Empty* /*request*/, ::bto::DumpRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDumpRecord(::grpc::ServerContext* context, ::bto::Empty* request, ::grpc::ServerAsyncResponseWriter< ::bto::DumpRecordResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Write<WithAsyncMethod_RecStart<WithAsyncMethod_RecStop<WithAsyncMethod_DumpRecord<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Write() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::bto::WriteRequest, ::bto::Result>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bto::WriteRequest* request, ::bto::Result* response) { return this->Write(context, request, response); }));}
    void SetMessageAllocatorFor_Write(
        ::grpc::experimental::MessageAllocator< ::bto::WriteRequest, ::bto::Result>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::bto::WriteRequest, ::bto::Result>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* /*context*/, const ::bto::WriteRequest* /*request*/, ::bto::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Write(
      ::grpc::CallbackServerContext* /*context*/, const ::bto::WriteRequest* /*request*/, ::bto::Result* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Write(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bto::WriteRequest* /*request*/, ::bto::Result* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RecStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RecStart() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::bto::RecStartRequest, ::bto::Result>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bto::RecStartRequest* request, ::bto::Result* response) { return this->RecStart(context, request, response); }));}
    void SetMessageAllocatorFor_RecStart(
        ::grpc::experimental::MessageAllocator< ::bto::RecStartRequest, ::bto::Result>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::bto::RecStartRequest, ::bto::Result>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RecStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecStart(::grpc::ServerContext* /*context*/, const ::bto::RecStartRequest* /*request*/, ::bto::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RecStart(
      ::grpc::CallbackServerContext* /*context*/, const ::bto::RecStartRequest* /*request*/, ::bto::Result* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RecStart(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bto::RecStartRequest* /*request*/, ::bto::Result* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RecStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RecStop() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::bto::Empty, ::bto::Result>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bto::Empty* request, ::bto::Result* response) { return this->RecStop(context, request, response); }));}
    void SetMessageAllocatorFor_RecStop(
        ::grpc::experimental::MessageAllocator< ::bto::Empty, ::bto::Result>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::bto::Empty, ::bto::Result>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RecStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecStop(::grpc::ServerContext* /*context*/, const ::bto::Empty* /*request*/, ::bto::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RecStop(
      ::grpc::CallbackServerContext* /*context*/, const ::bto::Empty* /*request*/, ::bto::Result* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RecStop(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bto::Empty* /*request*/, ::bto::Result* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DumpRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DumpRecord() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::bto::Empty, ::bto::DumpRecordResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bto::Empty* request, ::bto::DumpRecordResponse* response) { return this->DumpRecord(context, request, response); }));}
    void SetMessageAllocatorFor_DumpRecord(
        ::grpc::experimental::MessageAllocator< ::bto::Empty, ::bto::DumpRecordResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::bto::Empty, ::bto::DumpRecordResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DumpRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpRecord(::grpc::ServerContext* /*context*/, const ::bto::Empty* /*request*/, ::bto::DumpRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DumpRecord(
      ::grpc::CallbackServerContext* /*context*/, const ::bto::Empty* /*request*/, ::bto::DumpRecordResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DumpRecord(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bto::Empty* /*request*/, ::bto::DumpRecordResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Write<ExperimentalWithCallbackMethod_RecStart<ExperimentalWithCallbackMethod_RecStop<ExperimentalWithCallbackMethod_DumpRecord<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Write<ExperimentalWithCallbackMethod_RecStart<ExperimentalWithCallbackMethod_RecStop<ExperimentalWithCallbackMethod_DumpRecord<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Write() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* /*context*/, const ::bto::WriteRequest* /*request*/, ::bto::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RecStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RecStart() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_RecStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecStart(::grpc::ServerContext* /*context*/, const ::bto::RecStartRequest* /*request*/, ::bto::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RecStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RecStop() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_RecStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecStop(::grpc::ServerContext* /*context*/, const ::bto::Empty* /*request*/, ::bto::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DumpRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DumpRecord() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DumpRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpRecord(::grpc::ServerContext* /*context*/, const ::bto::Empty* /*request*/, ::bto::DumpRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Write() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* /*context*/, const ::bto::WriteRequest* /*request*/, ::bto::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWrite(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RecStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RecStart() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_RecStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecStart(::grpc::ServerContext* /*context*/, const ::bto::RecStartRequest* /*request*/, ::bto::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecStart(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RecStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RecStop() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_RecStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecStop(::grpc::ServerContext* /*context*/, const ::bto::Empty* /*request*/, ::bto::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecStop(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DumpRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DumpRecord() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DumpRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpRecord(::grpc::ServerContext* /*context*/, const ::bto::Empty* /*request*/, ::bto::DumpRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDumpRecord(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Write() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Write(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* /*context*/, const ::bto::WriteRequest* /*request*/, ::bto::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Write(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Write(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RecStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RecStart() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RecStart(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RecStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecStart(::grpc::ServerContext* /*context*/, const ::bto::RecStartRequest* /*request*/, ::bto::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RecStart(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RecStart(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RecStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RecStop() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RecStop(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RecStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecStop(::grpc::ServerContext* /*context*/, const ::bto::Empty* /*request*/, ::bto::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RecStop(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RecStop(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DumpRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DumpRecord() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DumpRecord(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DumpRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpRecord(::grpc::ServerContext* /*context*/, const ::bto::Empty* /*request*/, ::bto::DumpRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DumpRecord(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DumpRecord(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Write() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bto::WriteRequest, ::bto::Result>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::bto::WriteRequest, ::bto::Result>* streamer) {
                       return this->StreamedWrite(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Write(::grpc::ServerContext* /*context*/, const ::bto::WriteRequest* /*request*/, ::bto::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWrite(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bto::WriteRequest,::bto::Result>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RecStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RecStart() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bto::RecStartRequest, ::bto::Result>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::bto::RecStartRequest, ::bto::Result>* streamer) {
                       return this->StreamedRecStart(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RecStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RecStart(::grpc::ServerContext* /*context*/, const ::bto::RecStartRequest* /*request*/, ::bto::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRecStart(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bto::RecStartRequest,::bto::Result>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RecStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RecStop() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bto::Empty, ::bto::Result>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::bto::Empty, ::bto::Result>* streamer) {
                       return this->StreamedRecStop(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RecStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RecStop(::grpc::ServerContext* /*context*/, const ::bto::Empty* /*request*/, ::bto::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRecStop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bto::Empty,::bto::Result>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DumpRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DumpRecord() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bto::Empty, ::bto::DumpRecordResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::bto::Empty, ::bto::DumpRecordResponse>* streamer) {
                       return this->StreamedDumpRecord(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DumpRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DumpRecord(::grpc::ServerContext* /*context*/, const ::bto::Empty* /*request*/, ::bto::DumpRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDumpRecord(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bto::Empty,::bto::DumpRecordResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Write<WithStreamedUnaryMethod_RecStart<WithStreamedUnaryMethod_RecStop<WithStreamedUnaryMethod_DumpRecord<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Write<WithStreamedUnaryMethod_RecStart<WithStreamedUnaryMethod_RecStop<WithStreamedUnaryMethod_DumpRecord<Service > > > > StreamedService;
};

}  // namespace bto


#endif  // GRPC_bto_2fir_5fservice_2eproto__INCLUDED
