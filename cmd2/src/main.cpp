#include "cmdline.h"

#include <grpc++/grpc++.h>
#include "bto/ir_service.grpc.pb.h"

cmdline::parser parser_build(int argc, char **argv) {
    cmdline::parser p;
    p.add<std::string>("host", 'h', "host name", false, "localhost");
    p.add<int>("port", 'p', "port number", false, 50051, cmdline::range(1, 65535));
    p.add<std::string>("file", 'f', "file path for send data", true, "");
    p.parse_check(argc, argv);

    return p;
}

class IRServiceClient {
public:
    IRServiceClient(std::shared_ptr<grpc::Channel> channel)
        : stub_(bto::IRService::NewStub(channel)) {}

    void write() {
        grpc::ClientContext ctx;
        bto::WriteRequest req;
        bto::Result res;

        uint32_t data[] = {0x01,0x56,0x00,0xac,0x00,0x16,0x00,0x17,0x00,0x16,0x00,0x43,0x00,0x15,0x00,0x17,0x00,0x16,0x00,0x17,0x00,0x16,0x00,0x17,0x00,0x16,0x00,0x17,0x00,0x16,0x00,0x17,0x00,0x16,0x00,0x43,0x00,0x15,0x00,0x43,0x00,0x15,0x00,0x17,0x00,0x16,0x00,0x43,0x00,0x15,0x00,0x42,0x00,0x15,0x00,0x17,0x00,0x16,0x00,0x43,0x00,0x15,0x00,0x43,0x00,0x15,0x00,0x17,0x00,0x16,0x00,0x43,0x00,0x15,0x00,0x43,0x00,0x15,0x00,0x17,0x00,0x16,0x00,0x42,0x00,0x16,0x00,0x16,0x00,0x17,0x00,0x42,0x00,0x15,0x00,0x17,0x00,0x16,0x00,0x43,0x00,0x15,0x00,0x17,0x00,0x16,0x00,0x17,0x00,0x16,0x00,0x43,0x00,0x15,0x00,0x17,0x00,0x16,0x00,0x43,0x00,0x15,0x00,0x17,0x00,0x16,0x00,0x42,0x00,0x16,0x00,0x16,0x00,0x16,0x06,0x18};
        for (auto &&x : data) {
            req.add_data(x);
        }
        req.set_frequency(38000);

        grpc::Status status = this->stub_->Write(&ctx, req, &res);

    }

private:
    std::unique_ptr<bto::IRService::Stub> stub_;
};

int main(int argc, char **argv) {
    auto p = parser_build(argc, argv);

    std::stringstream fmt;
    fmt << p.get<std::string>("host") << ":" << p.get<int>("port");
    const auto addr = fmt.str();
    std::cout << addr << std::endl;

    auto chan = grpc::CreateChannel(addr, grpc::InsecureChannelCredentials());
    IRServiceClient client(chan);

    client.write();
    //     std::ifstream CIN_INPUT_FILE_STREAM(SW_CIN_INPUT_FILE);
    // std::cin.rdbuf(CIN_INPUT_FILE_STREAM.rdbuf());

    return 0;
}
